<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var serviceNames = new [] {
	"Customers",
	"Orders",
	"Products",
	};
#>
using System.Collections.Generic;
using System.Web.Mvc;
using System.Web.Routing;

namespace CompositeUI.Service.Infrastructure
{
<#
	var first = true;
	foreach(var name in serviceNames)
	{
		if(!first)
		{
			WriteLine("");
		}
		else
		{
			first = false;
		}
#>
	internal class <#= name #>InternalRouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
			foreach (var publicRoute in RouteTable.Routes)
            {
                var serviceRoute = publicRoute as ServiceRoute;
                if(serviceRoute != null)
                    continue;
                var webRoute = publicRoute as WebRoute;
                if(webRoute == null)
                    continue;
                var route = new Route(webRoute.Url, webRoute.RouteHandler)
				{
					RouteExistingFiles = webRoute.RouteExistingFiles,
					Constraints = new RouteValueDictionary(),
					DataTokens = new RouteValueDictionary(),
					Defaults = new RouteValueDictionary(),
				};
                foreach (var constraint in webRoute.Constraints)
                    route.Constraints[constraint.Key] = constraint.Value;
                foreach (var defaults in webRoute.Defaults)
                    route.Defaults[defaults.Key] = defaults.Value;
                foreach (var dataToken in webRoute.DataTokens)
                    route.DataTokens[dataToken.Key] = dataToken.Value;
				if(webRoute.DataTokens.ContainsKey("area"))
					route.DataTokens["Namespaces"] = new [] { "CompositeUI.<#= name #>.Web.Areas." + webRoute.DataTokens["area"] + ".Controllers" };
				else
				{
					route.DataTokens["area"] = <#= name #>Consts.ServiceName;
					route.DataTokens["Namespaces"] = new [] { "CompositeUI.<#= name #>.Web.Controllers" };
				}
                route.DataTokens[Consts.RouteServiceKey] = <#= name #>Consts.RouteServiceValue;
                route.DataTokens[Consts.RouteInternalServiceKey] = Consts.RouteInternalServiceValue;
				routes.Add(route);
            }
        }
    }
<#
	}
#>
}
