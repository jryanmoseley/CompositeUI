<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var serviceNames = new [] {
	"Customers",
	"Orders",
	"Products",
	};
#>
using System.Collections.Generic;
using System.Web.Mvc;
using System.Web.Routing;
using CompositeUI.Service.Infrastructure.Consts;

namespace CompositeUI.Service.Infrastructure.Routing
{
<#
	var first = true;
	foreach(var name in serviceNames)
	{
		if(!first)
		{
			WriteLine("");
		}
		else
		{
			first = false;
		}
#>
	internal class <#= name #>InternalRouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            foreach (var route in RegisteredRoutes(routes))
            {
                route.DataTokens[Consts.Consts.RouteServiceKey] = <#= name #>Consts.RouteServiceValue;
                route.DataTokens[Consts.Consts.RouteInternalServiceKey] = Consts.Consts.RouteInternalServiceValue;
            }
        }

        private static IEnumerable<Route> RegisteredRoutes(RouteCollection routes)
        {
            var route = routes.MapRoute(
                "TestArea_default",
                "TestArea/{controller}/{action}/{id}",
                new {action = "Index", id = UrlParameter.Optional},
                new[] {"CompositeUI.<#= name #>.Web.Areas.TestArea.Controllers"}
                );
            route.DataTokens["area"] = "TestArea";
            yield return route;

            route = routes.MapRoute(
                name: "Default",
                namespaces: new[] { "CompositeUI.<#= name #>.Web.Controllers" },
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
            route.DataTokens["area"] = <#= name #>Consts.ServiceName;
            yield return route;
        }
    }
<#
	}
#>
}
